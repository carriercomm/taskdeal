use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/extlib/lib/perl5";
use lib "$FindBin::Bin/mojo/lib";

use Config::Tiny;
use Mojo::UserAgent;

use Config::Tiny;

my $config_file = "$FindBin::Bin/taskdeal.conf";
my $config = Config::Tiny->new->read($config_file);

my $ua = Mojo::UserAgent->new;

$ua->inactivity_timeout(0);

# server URL
my $server_host = $config->{server}{host} || 'localhost';
my $server_url = "ws://$server_host";
$ENV{TASKDEAL_SERVER_PORT} = 3000;
my $server_port = $ENV{TASKDEAL_SERVER_PORT} || $config->{server}{port} || '10040';

$server_url .= ":$server_port";

# Connect to server
my $connect_cb;
$connect_cb = sub {
  my $ua = Mojo::UserAgent->new;
  $ua->websocket($server_url => sub {
    my ($ua, $tx) = @_;
    
    if ($tx->is_websocket) {
      my $local_address = $tx->local_address;
      my $local_port = $tx->local_port;
      
      $tx->on(json => sub {
        my ($tx, $hash) = @_;
        
        my $type = $hash->{type};
        if ($type eq 'task' || $type eq 'sync') {
          my $ua = Mojo::UserAgent->new;
          
          $ua->websocket("ws://$local_address:$local_port" => sub {
            my $self = shift;

            # Receive
            $self->on(json => sub {
              my ($tx, $hash) = @_;
              
              my $type = $hash->{type};
              if ($type eq 'task' || $type eq 'sync') {
                my @command = @{$hash->{command} || []};
                system("./$type", @command);
              }
            });
          });
        }
      });
    }
    else {
      my $error = "(Child) Can't connect to server: $server_url.";
      app->log->error("$error");
      Mojo::IOLoop->timer(30 => sub {
        goto $connect_cb;
      });
    }
  });
};

my $websocket_cb;
$websocket_cb = sub {
  $ua->websocket('http://localhost:3000' => sub {
    my ($ua, $tx) = @_;
    
    if ($tx->is_websocket) {
      warn "aaa";
    }
    else {
      warn "bbbb";
    }
  });
};
$websocket_cb->();

Mojo::IOLoop->start unless Mojo::IOLoop->is_running;
