#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/extlib/lib/perl5";
use lib "$FindBin::Bin/mojo/lib";
BEGIN { $ENV{MOJO_HOME} = "$FindBin::Bin/.." }
use Mojolicious::Lite;

my $debug = $ENV{TASKDEAL_DEBUG};

my $clients = {};

# Config
my $config = plugin('INIConfig', ext => 'conf');

# Workers is always 1
my $hypnotoad = $config->{hypnotoad};
$hypnotoad->{workers} = 1;

# Tasks directory
my $tasks_dir = app->home->rel_dir('tasks');

# Receive
websocket '/' => sub {
  my $self = shift;
  
  # Child id
  my $object_id = "$self";
  my ($cid) = $object_id =~ /\(0x(.+?)\)$/;
  
  # Resist controller
  $clients->{$cid}{controller} = $self;
  
  # Remote host
  $clients->{$cid}{host} = $self->tx->remote_address;
  
  # Remote port
  $clients->{$cid}{port} = $self->tx->remote_port;
  
  # Receive
  $self->on(json => sub {
    my ($tx, $hash) = @_;
    
    my $remote_address = $tx->remote_address;
    
    if (my $message = $hash->{message}) {
      if ($hash->{error}) {
        app->log->error("$message from child $remote_address)");
      }
      else {
        app->log->info("$message from child $remote_address)");
      }
    }
  });
  
  # Finish
  $self->on('finish' => sub {
    # Remove child
    delete $clients->{$cid};
    warn "finish";
  });
  
  warn "Websocket is connected" if $debug;
};

my $push_event = sub {
  my ($self, $type) = @_;
  
  $self->on(json => sub {
    my ($tx, $hash) = @_;
    
    $hash->{type} = $type;
    
    # Send message to clients
    for my $cid (keys %$clients) {
      $clients->{$cid}{controller}->send(json => $hash);
    }
  });
};

websocket '/task' => sub { $push_event->('task') };
websocket '/sync' => sub { $push_event->('sync') };
get '/clients.json' => sub {
  my $self = shift;
  
  return $self->render(json => $clients);
};

get '/' => sub {
  my $self = shift;
  
  $self->render('/index', clients => $clients)
};

$ENV{MOJO_INACTIVITY_TIMEOUT} = 0;

app->start;
