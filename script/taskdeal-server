#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../extlib/lib/perl5";
use lib "$FindBin::Bin/../mojo/lib";
use lib "$FindBin::Bin/../lib";
BEGIN { $ENV{MOJO_HOME} = "$FindBin::Bin/.." }
use Mojolicious::Lite;
use Taskdeal::Log;
use Data::Dumper 'Dumper';

# Log
my $log = Taskdeal::Log->new(path => "$FindBin::Bin/../log/taskdeal-server.log");

app->helper(api => sub { Taskdeal::API->new(cntl => shift) });

# Config
my $config = plugin('INIConfig', ext => 'conf');

# Workers is always 1
my $hypnotoad = $config->{hypnotoad};
$hypnotoad->{workers} = 1;

# Tasks directory
my $tasks_dir = app->home->rel_dir('tasks');

# Clients
my $clients = {};

# Receive
websocket '/' => sub {
  my $self = shift;
  
  # Client id
  my $object_id = "$self";
  my ($cid) = $object_id =~ /\(0x(.+?)\)$/;
  
  # Resist controller
  $clients->{$cid}{controller} = $self;
  
  # Client host
  my $client_host = $self->tx->remote_address;
  $clients->{$cid}{host} = $client_host;
  
  # Remote port
  my $client_port = $self->tx->remote_port;
  $clients->{$cid}{port} = $client_port;
  
  my $client_info = sub {
    
    my $name = $clients->{$cid}{name};
    my $group = $clients->{$cid}{group};
    my $info = "[";
    $info .= "Name:$name, " if defined $name;
    $info .= "Group:$group, " if defined $group;
    $info .= "Host:$client_host:$client_port, ID:$cid]";
    
    return $info;
  };
  
  # Connected message
  $log->info("Success Websocket Handshake. " . $client_info->());
  
  # Receive client result
  $self->on(json => sub {
    my ($tx, $result) = @_;
    
    my $type = $result->{type} || '';
    
    if ($type eq 'client_info') {
      $clients->{$cid}{current_task} = $result->{current_task};
      $clients->{$cid}{name} = $result->{name};
      $clients->{$cid}{group} = $result->{group};
      $clients->{$cid}{description} = $result->{description};
      
      $log->info("Client Connect. " . $client_info->());
    }
    else {
      if (my $message = $result->{message}) {
        if ($result->{error}) {
          $log->error($client_info->() . " send error message");
        }
        else {
          $log->info($client_info->() . " send success message");
        }
      }
    }
  });
  
  # Client disconnected
  $self->on('finish' => sub {
    # Remove client
    my $info = $client_info->();
    delete $clients->{$cid};
    $log->info("Clinet Disconnect. " . $info);
  });
};

post '/task' => sub {
  my $self = shift;
  
  my $cid = $self->param('id');
  my $command = $self->param('command');
  
  $clients->{$cid}{controller}->send(json => {
    type => 'task',
    command => $command
  });
};

post '/sync' => sub {
  my $self = shift;
  
  my $cid = $self->param('id');
  my $task = $self->param('task');
  
  $clients->{$cid}{controller}->send(json => {
    type => 'sync',
    task => $task
  });
};

get '/' => sub {
  my $self = shift;
  
  $self->render('/index', clients => $clients)
};

$ENV{MOJO_INACTIVITY_TIMEOUT} = 0;

app->start;
